package Simulacion;

import java.io.Serializable;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.util.HashMap;
import java.util.LinkedHashMap;

import javax.swing.JScrollPane;
import javax.swing.JTable;

public class TablasEstadisticas implements Serializable 
{
	private static final long serialVersionUID = -6402570270839738665L;
	
	public JScrollPane scVC, scABC, scChi2;
	public JTable tablaAreaBajoCurva, tablaChiCuadrado, tablaValoresCriticos;

	public HashMap<Integer, BigDecimal[]> valoresCriticos;
	public LinkedHashMap<Double, BigDecimal[]> valorBajoCurva;
	public LinkedHashMap<Integer, BigDecimal[]> valorChi2;

	public TablasEstadisticas() {
		init();

		tablaValoresCriticos = new JTable(

				getTable(valoresCriticos, 4),

				new Object[] { "v grados de libertad", "Dα = 0.1", "Dα = 0.05", "Dα = 0.01" });

		tablaAreaBajoCurva = new JTable(getTable(valorBajoCurva, 11),

				new Object[] { "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" });

		tablaChiCuadrado = new JTable(getTable(valorChi2, 15),

				new Object[] { "v", "x².005", "x².01", "x².025", "x².05", "x².10", "x².25", "x².50", "x².75", "x².90",
						"x².95", "x².975", "x².99", "x².995", "x².999", });

		scVC = new JScrollPane(tablaValoresCriticos);
		scABC = new JScrollPane(tablaAreaBajoCurva);
		scChi2 = new JScrollPane(tablaChiCuadrado);
	}

	private Object[][] getTable(HashMap<? extends Number, BigDecimal[]> ref, int cols) {
		Object[][] x = new Object[ref.size()][cols];
		int ind = 0;

		for (Object k : ref.keySet()) {
			x[ind][0] = k;

			for (int i = 1; i < cols; i++) {
				x[ind][i] = ref.get(k)[i - 1];
			}
			ind++;
		}

		return x;
	}

	private void init()
	{
		valoresCriticos = new HashMap<Integer, BigDecimal[]>();
		valoresCriticos.put(1,getBDec("0.950", "0.975", "0.995"));
		valoresCriticos.put(2,getBDec("0.776", "0.842", "0.929"));
		valoresCriticos.put(3,getBDec("0.642", "0.708", "0.828"));
		valoresCriticos.put(4,getBDec("0.564", "0.624", "0.733"));
		valoresCriticos.put(5,getBDec("0.510", "0.565", "0.669"));
		valoresCriticos.put(6,getBDec("0.470", "0.521", "0.618"));
		valoresCriticos.put(7,getBDec("0.438", "0.486", "0.577"));
		valoresCriticos.put(8,getBDec("0.411", "0.457", "0.543"));
		valoresCriticos.put(9,getBDec("0.388", "0.432", "0.514"));
		valoresCriticos.put(10,getBDec("0.368", "0.410", "0.490"));
		valoresCriticos.put(11,getBDec("0.352", "0.391", "0.468"));
		valoresCriticos.put(12,getBDec("0.338", "0.375", "0.450"));
		valoresCriticos.put(13,getBDec("0.325", "0.361", "0.433"));
		valoresCriticos.put(14,getBDec("0.314", "0.349", "0.418"));
		valoresCriticos.put(15,getBDec("0.304", "0.338", "0.404"));
		valoresCriticos.put(16,getBDec("0.295", "0.328", "0.392"));
		valoresCriticos.put(17,getBDec("0.286", "0.318", "0.381"));
		valoresCriticos.put(18,getBDec("0.278", "0.309", "0.371"));
		valoresCriticos.put(19,getBDec("0.272", "0.301", "0.363"));
		valoresCriticos.put(20,getBDec("0.264", "0.294", "0.356"));
		valoresCriticos.put(25,getBDec("0.250", "0.270", "0.320"));
		valoresCriticos.put(30,getBDec("0.220", "0.240", "0.290"));
		valoresCriticos.put(35,getBDec("0.210", "0.230", "0.270"));
		valoresCriticos.put(40,getBDec("0.193", "0.215", "0.258"));
		valoresCriticos.put(45,getBDec("0.182", "0.203", "0.243"));
		
		
		valorBajoCurva = new LinkedHashMap<Double, BigDecimal[]>();
		
		valorBajoCurva.put(0.0,
		getBDec("0.0000","0.0040","0.0080","0.0120","0.0160","0.0199","0.0239","0.0279","0.0319","0.0359"));
		
		
		valorBajoCurva.put(0.1,
		getBDec("0.0398","0.0438","0.0478","0.0517","0.0557","0.0596","0.0636","0.0675","0.0714","0.0754"));
		
		valorBajoCurva.put(0.2,
		getBDec("0.0793","0.0832","0.0871","0.0910","0.0948","0.0987","0.1026","0.1064","0.1103","0.1141"));
		
		valorBajoCurva.put(0.3,
		getBDec("0.1179","0.1217","0.1255","0.1293","0.1331","0.1368","0.1406","0.1443","0.1480","0.1517"));
		
		valorBajoCurva.put(0.4,
		getBDec("0.1554","0.1591","0.1628","0.1664","0.1700","0.1736","0.1772","0.1808","0.1844","0.1879"));
				
		valorBajoCurva.put(0.5,
		getBDec("0.1915","0.1950","0.1985","0.2019","0.2054","0.2088","0.2123","0.2157","0.2190","0.2224"));
		
		valorBajoCurva.put(0.6,
		getBDec("0.2257","0.2291","0.2324","0.2357","0.2389","0.2422","0.2454","0.2486","0.2517","0.2549"));
		
		/**/
		valorBajoCurva.put(0.7,
		getBDec("0.2580","0.2611","0.2642","0.2673","0.2704","0.2734","0.2764","0.2794","0.2823","0.2852"));
		
		valorBajoCurva.put(0.8,
		getBDec("0.2881","0.2910","0.2939","0.2967","0.2995","0.3023","0.3051","0.3078","0.3106","0.3133"));
				
				
		valorBajoCurva.put(0.9,
		getBDec("0.3159","0.3186","0.3212","0.3238","0.3264","0.3289","0.3315","0.3340","0.3365","0.3389"));
		
		valorBajoCurva.put(1.0,
		getBDec("0.3413","0.3438","0.3461","0.3485","0.3508","0.3531","0.3554","0.3577","0.3599","0.3621"));
		
		valorBajoCurva.put(1.1,
		getBDec("0.3643","0.3665","0.3686","0.3708","0.3729","0.3749","0.3770","0.3790","0.3810","0.3830"));
		
		valorBajoCurva.put(1.2,
		getBDec("0.3849","0.3869","0.3888","0.3907","0.3925","0.3944","0.3962","0.3980","0.3997","0.4015"));
		
		valorBajoCurva.put(1.3,
		getBDec("0.4032","0.4049","0.4066","0.4082","0.4099","0.4115","0.4131","0.4147","0.4162","0.4177"));
		
		valorBajoCurva.put(1.4,
		getBDec("0.4192","0.4207","0.4222","0.4236","0.4251","0.4265","0.4279","0.4292","0.4306","0.4319"));
		
		valorBajoCurva.put(1.5,
		getBDec("0.4332","0.4345","0.4357","0.4370","0.4382","0.4394","0.4406","0.4418","0.4429","0.4441"));
		
		valorBajoCurva.put(1.6,
		getBDec("0.4452","0.4463","0.4474","0.4484","0.4495","0.4505","0.4515","0.4525","0.4535","0.4545"));
		
		valorBajoCurva.put(1.7,
		getBDec("0.4554","0.4564","0.4573","0.4582","0.4591","0.4599","0.4608","0.4616","0.4625","0.4633"));
		
		valorBajoCurva.put(1.8,
		getBDec("0.4641","0.4649","0.4656","0.4664","0.4671","0.4678","0.4686","0.4693","0.4699","0.4706"));
		
		valorBajoCurva.put(1.9,
		getBDec("0.4713","0.4719","0.4726","0.4732","0.4738","0.4744","0.4750","0.4756","0.4761","0.4767"));
		
		valorBajoCurva.put(2.0,
		getBDec("0.4772","0.4778","0.4783","0.4788","0.4793","0.4798","0.4803","0.4808","0.4812","0.4817"));
		
		valorBajoCurva.put(2.1,
		getBDec("0.4821","0.4826","0.4830","0.4834","0.4838","0.4842","0.4846","0.4850","0.4854","0.4857"));
		
		valorBajoCurva.put(2.2,
		getBDec("0.4861","0.4864","0.4868","0.4871","0.4875","0.4878","0.4881","0.4884","0.4887","0.4890"));
		
		
		valorBajoCurva.put(2.3,
		getBDec("0.4893","0.4896","0.4898","0.4901","0.4904","0.4906","0.4909","0.4911","0.4913","0.4916"));
		
		valorBajoCurva.put(2.4,
		getBDec("0.4918","0.4920","0.4922","0.4925","0.4927","0.4929","0.4931","0.4932","0.4934","0.4936"));
		
		valorBajoCurva.put(2.5,
		getBDec("0.4938","0.4940","0.4941","0.4943","0.4945","0.4946","0.4948","0.4949","0.4951","0.4952"));
		
		valorBajoCurva.put(2.6,
		getBDec("0.4953","0.4955","0.4956","0.4957","0.4959","0.4960","0.4961","0.4962","0.4963","0.4964"));
		
		valorBajoCurva.put(2.7,
		getBDec("0.4965","0.4966","0.4967","0.4968","0.4969","0.4970","0.4971","0.4972","0.4973","0.4974"));
		
		valorBajoCurva.put(2.8,
		getBDec("0.4974","0.4975","0.4976","0.4977","0.4977","0.4978","0.4979","0.4979","0.4980","0.4981"));

		valorBajoCurva.put(2.9,
		getBDec("0.4981","0.4982","0.4982","0.4983","0.4984","0.4984","0.4985","0.4985","0.4986","0.4986"));
		
		valorBajoCurva.put(3.0,
		getBDec("0.4987","0.4987","0.4987","0.4988","0.4988","0.4989","0.4989","0.4989","0.4990","0.4990"));
		
		valorBajoCurva.put(3.1,
		getBDec("0.4990","0.4991","0.4991","0.4991","0.4992","0.4992","0.4992","0.4992","0.4993","0.4993"));
		
		valorBajoCurva.put(3.2,
		getBDec("0.4993","0.4993","0.4994","0.4994","0.4994","0.4994","0.4994","0.4995","0.4995","0.4995"));
		
		valorBajoCurva.put(3.3,
		getBDec("0.4995","0.4995","0.4995","0.4996","0.4996","0.4996","0.4996","0.4996","0.4996","0.4997"));
		
		valorBajoCurva.put(3.4,
		getBDec("0.4997","0.4997","0.4997","0.4997","0.4997","0.4997","0.4997","0.4997","0.4997","0.4998"));
		
		valorBajoCurva.put(3.5,
		getBDec("0.4998","0.4998","0.4998","0.4998","0.4998","0.4998","0.4998","0.4998","0.4998","0.4998"));
		
		valorBajoCurva.put(3.6,
		getBDec("0.4998","0.4998","0.4999","0.4999","0.4999","0.4999","0.4999","0.4999","0.4999","0.4999"));
		
		valorBajoCurva.put(3.7,
		getBDec("0.4999","0.4999","0.4999","0.4999","0.4999","0.4999","0.4999","0.4999","0.4999","0.4999"));
		
		valorBajoCurva.put(3.8,
		getBDec("0.4999","0.4999","0.4999","0.4999","0.4999","0.4999","0.4999","0.4999","0.4999","0.4999"));
		
		valorBajoCurva.put(3.9,
		getBDec("0.5000","0.5000","0.5000","0.5000","0.5000","0.5000","0.5000","0.5000","0.5000","0.5000"));
		
		valorChi2 = new LinkedHashMap<Integer, BigDecimal[]>();
		
		valorChi2.put(1,getBDec(".0000",".0002",".0010",".0039",".0158",".1020",
				".4550","1.32","2.71","3.84","5.02","6.63","7.88","10.8"));
		valorChi2.put(2,
		getBDec(".0100",".0201",".0506",".103",".211",".575","1.39","2.77",
				"4.61","5.99","7.38","9.21","10.6","13.8"));
		valorChi2.put(3,
		getBDec(".0717",".115",".216",".352",".584","1.21","2.37","4.11",
				"6.25","7.81","9.35","11.3","12.8","16.3"));
		valorChi2.put(4,
		getBDec(".207",".297",".484",".711","1.06","1.92","3.36",
				"5.39","7.78","9.49","11.1","13.3","14.9","18.5"));
		valorChi2.put(5,
		getBDec(".412",".554",".831","1.15","1.61","2.67","4.35",
				"6.63","9.24","11.1","12.8","15.1","16.7","20.5"));
		
		valorChi2.put(6,getBDec(".676",".872","1.24","1.64","2.20","3.45","5.35"
				,"7.84","10.6","12.6","14.4","16.8","18.5","22.5"));
		
		valorChi2.put(7,getBDec(".989","1.24","1.69","2.17","2.83","4.25",
				"6.35","9.04","12.0","14.1","16.0","18.5","20.3","24.3"));
		
		valorChi2.put(8,getBDec("1.34","1.65","2.18","2.73","3.49","5.07",
				"7.34","10.2","13.4","15.5","17.5","20.1","22.0","26.1"));
		
		valorChi2.put(9,getBDec("1.73","2.09","2.70","3.33","4.17","5.90",
				"8.34","11.4","14.7","16.9","19.0","21.7","23.6","27.9"));
		
		valorChi2.put(10,getBDec("2.16","2.56","3.25","3.94","4.87",
				"6.74","9.34","12.5","16.0","18.3","20.5","23.2","25.2","29.6"));
		
		valorChi2.put(11,getBDec("2.60","3.05","3.82","4.57","5.58","7.58",
				"10.3","13.7","17.3","19.7","21.9","24.7","26.8","31.3"));
		
		valorChi2.put(12,getBDec("3.07","3.57","4.40","5.23","6.30","8.44",
				"11.3","14.8","18.5","21.0","23.3","26.2","28.3","32.9"));
		
		valorChi2.put(13,getBDec("3.57","4.11","5.01","5.89","7.04","9.30",
				"12.3","16.0","19.8","22.4","24.7","27.7","29.8","34.5"));
		
		valorChi2.put(14,getBDec("4.07","4.66","5.63","6.57","7.79","10.2",
				"13.3","17.1","21.1","23.7","26.1","29.1","31.3","36.1"));
		
		valorChi2.put(15,getBDec("4.60","5.23","6.26","7.26","8.55","11.0",
				"14.3","18.2","22.3","25.0","27.5","30.6","32.8","37.7"));
		
		valorChi2.put(16,getBDec("5.14","5.81","6.91","7.96","9.31","11.9",
				"15.3","19.4","23.5","26.3","28.8","32.0","34.3","39.3"));
		
		valorChi2.put(17,getBDec("5.70","6.41","7.56","8.67","10.1","12.8",
				"16.3","20.5","24.8","27.6","30.2","33.4","35.7","40.8"));
		
		valorChi2.put(18,getBDec("6.26","7.01","8.23","9.39","10.9","13.7",
				"17.3","21.6","26.0","28.9","31.5","34.8","37.2","42.3"));
		
		valorChi2.put(19,getBDec("6.84","7.63","8.91","10.1","11.7","14.6",
				"18.3","22.7","27.2","30.1","32.9","36.2","38.6","43.8"));
		
		valorChi2.put(20,getBDec("7.43","8.26","9.59","10.9","12.4","15.5",
				"19.3","23.8","28.4","31.4","34.2","37.6","40.0","45.3"));
		
		valorChi2.put(21,getBDec("8.03","8.90","10.3","11.6","13.2","16.3",
				"20.3","24.9","29.6","32.7","35.5","38.9","41.4","46.8"));
		
		valorChi2.put(22,getBDec("8.64","9.54","11.0","12.3","14.0","17.2",
				"21.3","26.0","30.8","33.9","36.8","40.3","42.8","48.3"));
		
		valorChi2.put(23,getBDec("9.26","10.2","11.7","13.1","14.8","18.1",
				"22.3","27.1","32.0","35.2","38.1","41.6","44.2","49.7"));
		
		valorChi2.put(24,getBDec("9.89","10.9","12.4","13.8","15.7","19.0",
				"23.3","28.2","33.2","36.4","39.4","43.0","45.6","51.2"));
		
		valorChi2.put(25,getBDec("10.5","11.5","13.1","14.6","16.5","19.9",
				"24.3","29.3","34.4","37.7","40.6","44.3","46.9","52.6"));
		
		valorChi2.put(26,getBDec("11.2","12.2","13.8","15.4","17.3","20.8",
				"25.3","30.4","35.6","38.9","41.9","45.6","48.3","54.1"));
		
		valorChi2.put(27,getBDec("11.8","12.9","14.6","16.2","18.1","21.7",
				"26.3","31.5","36.7","40.1","43.2","47.0","49.6","55.5"));
		
		valorChi2.put(28,getBDec("12.5","13.6","15.3","16.9","18.9","22.7",
				"27.3","32.6","37.9","41.3","44.5","48.8","51.0","56.9"));
		
		valorChi2.put(29,getBDec("13.1","14.3","16.0","17.7","19.8","23.6",
				"28.3","33.7","39.1","42.6","45.7","49.6","52.3","58.3"));
		
		valorChi2.put(30,getBDec("13.8","15.0","16.8","18.5","20.6","24.5",
				"29.3","34.8","40.3","43.8","47.0","50.9","53.7","59.7"));
		
		valorChi2.put(40,getBDec("20.7","22.2","24.4","26.5","29.1","33.7"
				,"39.3","45.6","51.8","55.8","59.3","63.7","66.8","73.4"));
		
		valorChi2.put(50,getBDec("28.0","29.7","32.4","34.8","37.7","42.9",
				"49.3","56.3","63.2","67.5","71.4","76.2","79.5","86.7"));
		
		valorChi2.put(60,getBDec("35.5","37.5","40.5","43.2","46.5","52.3",
				"59.3","67.0","74.4","79.1","83.3","88.4","92.0","99.6"));
		
		valorChi2.put(70,getBDec("43.3","45.4","48.8","51.7","55.3","61.7",
				"69.3","77.6","85.5","90.5","95.0","100","104","112"));
		
		valorChi2.put(80,getBDec("51.2","53.5","57.2","60.4","64.3","71.1",
				"79.3","88.1","96.6","102","107","112","116","125"));
		
		valorChi2.put(90,getBDec("59.2","61.8","65.6","69.1","73.3","80.6"
				,"89.3","98.6","108","113","118","124","128","137"));
		
		valorChi2.put(100,getBDec("67.3","70.1","74.2","77.9","82.4","90.1",
				"99.3","109","118","124","130","136","140","149"));
	}
	
	public BigDecimal getValorCritico(Integer key, int pos)
	{
		BigDecimal d=null;
		
		try
		{
			d = valoresCriticos.get(key)[pos];
		}
		catch(NullPointerException e)
		{

			switch(pos)
			{
				case 0:
					d = new BigDecimal(1.22).divide(new BigDecimal(key).sqrt
							(new MathContext(3,RoundingMode.HALF_UP)),3,RoundingMode.HALF_UP);
					break;
					
				case 1:
					d = new BigDecimal(1.36).divide(new BigDecimal(key).sqrt
							(new MathContext(3,RoundingMode.HALF_UP)),3,RoundingMode.HALF_UP);
					break;
					
				case 2:
					d = new BigDecimal(1.63).divide(new BigDecimal(key).sqrt
							(new MathContext(3,RoundingMode.HALF_UP)),3,RoundingMode.HALF_UP);
			}
			
		}
		
		return d;
	}
	
	private BigDecimal[] getBDec(String... vs) {
		BigDecimal[] big = new BigDecimal[vs.length];

		for (int i = 0; i < vs.length; i++)
			big[i] = new BigDecimal(vs[i]);

		return big;
	}
}
